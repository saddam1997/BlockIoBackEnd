<!DOCTYPE html>
<html>
<head>
    <title>Block.io: Bitcoin API and More</title>
    <meta charset="utf-8" />
    <meta name="author" value="Block.io" />
    <meta content="on" http-equiv="cleartype" />
    <meta content="width=device-width, initial-scale=1.0" name="viewport" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="apple-mobile-web-app-capable" content="yes">

    <!-- Favicons -->
    <link rel="apple-touch-icon-precomposed" sizes="57x57" href="/apple-touch-icon-57x57.png" />
    <link rel="apple-touch-icon-precomposed" sizes="114x114" href="/apple-touch-icon-114x114.png" />
    <link rel="apple-touch-icon-precomposed" sizes="72x72" href="/apple-touch-icon-72x72.png" />
    <link rel="apple-touch-icon-precomposed" sizes="144x144" href="/apple-touch-icon-144x144.png" />
    <link rel="apple-touch-icon-precomposed" sizes="60x60" href="/apple-touch-icon-60x60.png" />
    <link rel="apple-touch-icon-precomposed" sizes="120x120" href="/apple-touch-icon-120x120.png" />
    <link rel="apple-touch-icon-precomposed" sizes="76x76" href="/apple-touch-icon-76x76.png" />
    <link rel="apple-touch-icon-precomposed" sizes="152x152" href="/apple-touch-icon-152x152.png" />
    <link rel="icon" type="image/png" href="images/favicon-196x196.png" sizes="196x196" />
    <link rel="icon" type="image/png" href="images/favicon-96x96.png" sizes="96x96" />
    <link rel="icon" type="image/png" href="images/favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="images/favicon-16x16.png" sizes="16x16" />
    <link rel="icon" type="image/png" href="images/favicon-128.png" sizes="128x128" />
    <link rel="shortcut icon" type="image/png" href="images//favicon.ico" />
    <meta name="application-name" content="Block.io"/>
    <meta name="msapplication-TileColor" content="#FFFFFF" />
    <meta name="msapplication-TileImage" content="/mstile-144x144.png" />
    <meta name="msapplication-square70x70logo" content="/mstile-70x70.png" />
    <meta name="msapplication-square150x150logo" content="/mstile-150x150.png" />
    <meta name="msapplication-wide310x150logo" content="/mstile-310x150.png" />
    <meta name="msapplication-square310x310logo" content="/mstile-310x310.png" />



    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/reset.css">
    <link rel="stylesheet" href="/styles/font-awesome.min.css">
    <link rel="stylesheet" href="/styles/fira.css">
    <link rel="stylesheet" href="/styles/fontsDetails.css">
    <link rel="stylesheet" href="/styles/screen-base.css">
    <link rel="stylesheet" href="/styles/prism.css">
    <link rel="stylesheet" href="/styles/readable-bootstrap.min.css">
    <link rel="stylesheet" href="/styles/blockio.css">
    <!--STYLES END-->
    <link media="screen and (min-width: 0em) and (max-width: 43.6875em)" href="/styles/small.css" rel="stylesheet" />
    <link media="screen and (min-width: 43.75em) and (max-width: 64.9375em)" href="/styles/medium.css" rel="stylesheet" />
    <link media="screen and (min-width: 65em)" href="/styles/large.css" rel="stylesheet" />
</head>

  <body id="top" ng-app="blockappmodule" >
    <header id="page-header">
      <nav class="container">
        <p class="col first sm-col-03">
          <a href="/"><img src="/../images/blockio-icon-white.svg" class="logo" /></a>
        </p>
        <ul class="col sm-col-03 right last">
          <li class="nav-security">
            <a href="/security">Security</a>
          </li>
          <li class="nav-support">
            <a href="/contacts">Support</a>
          </li>
          <li class="nav-developers">
            <a href="/docs">For Developers</a>
          </li>
          <% if (!session.authenticated) { %>

            <li class="nav-login">
              <a href="/signin">Login</a>
            </li>
            <li class="nav-sign-up">
              <a href="/signup">Sign Up</a>
            </li>
            <% } %>
            <% if (session.authenticated) { %>
              <li class="nav-login">
                <a href="/session/destroy" class="logoutlink">Logout</a>
              </li>
              <li class="nav-sign-up">

                <a href="/user/dashboard/<%=session.User.id%>">Wallet</a>
              </li>
              <% } %>

            </ul>
          </nav>
        </header>

        <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/jquery-2.1.1.min.js"></script>
    <script src="/js/angular.min.js"></script>
    <script src="/js/index-page.js"></script>
    <script src="/js/combined.min.js"></script>
    <script src="/js/app.js"></script>
    <script src="/js/tab.js"></script>
    <script src="/js/responsiveCarousel.min.js"></script>
    <script src="/js/zxcvbn-async.min.js"></script>
    <script src="/js/google_analytics.js"></script>
    <script src="/js/affiliate.js"></script>
    <script src="/js/signup.js"></script>
    <script src="/js/ngStorage.min.js"></script>
    <script src="/js/service.js"></script>
    <script src="/js/signin.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
